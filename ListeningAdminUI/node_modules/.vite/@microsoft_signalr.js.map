{
  "version": 3,
  "sources": ["../@microsoft/signalr/src/Errors.ts", "../@microsoft/signalr/src/HttpClient.ts", "../@microsoft/signalr/src/ILogger.ts", "../@microsoft/signalr/src/Loggers.ts", "../@microsoft/signalr/src/Utils.ts", "../@microsoft/signalr/src/FetchHttpClient.ts", "../@microsoft/signalr/src/XhrHttpClient.ts", "../@microsoft/signalr/src/DefaultHttpClient.ts", "../@microsoft/signalr/src/TextMessageFormat.ts", "../@microsoft/signalr/src/HandshakeProtocol.ts", "../@microsoft/signalr/src/IHubProtocol.ts", "../@microsoft/signalr/src/Subject.ts", "../@microsoft/signalr/src/HubConnection.ts", "../@microsoft/signalr/src/DefaultReconnectPolicy.ts", "../@microsoft/signalr/src/ITransport.ts", "../@microsoft/signalr/src/AbortController.ts", "../@microsoft/signalr/src/LongPollingTransport.ts", "../@microsoft/signalr/src/ServerSentEventsTransport.ts", "../@microsoft/signalr/src/WebSocketTransport.ts", "../@microsoft/signalr/src/HttpConnection.ts", "../@microsoft/signalr/src/JsonHubProtocol.ts", "../@microsoft/signalr/src/HubConnectionBuilder.ts"],
  "sourcesContent": ["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // tslint:disable-next-line:variable-name\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // tslint:disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, logMessageContent: boolean, withCredentials: boolean, defaultHeaders: MessageHeaders): Promise<void> {\r\n    let headers = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, logMessageContent)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...defaultHeaders},\r\n        responseType,\r\n        withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private subject: Subject<T>;\r\n    private observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this.subject = subject;\r\n        this.observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this.subject.observers.indexOf(this.observer);\r\n        if (index > -1) {\r\n            this.subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this.subject.observers.length === 0 && this.subject.cancelCallback) {\r\n            this.subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly minimumLogLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public outputConsole: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this.minimumLogLevel = minimumLogLevel;\r\n        this.outputConsole = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this.minimumLogLevel) {\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.outputConsole.error(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.outputConsole.warn(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.outputConsole.info(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.outputConsole.log(`[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\nfunction getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nfunction getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport * as tough from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly jar?: tough.CookieJar;\r\n\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this.jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this.fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this.fetchType = requireFunc(\"fetch-cookie\")(this.fetchType, this.jar);\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this.abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this.fetchType = fetch.bind(self);\r\n            this.abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this.abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this.fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"manual\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this.logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            throw new HttpError(response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this.jar) {\r\n            // @ts-ignore: unused variable\r\n            this.jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this.httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this.httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this.httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this.httpClient.getCookieString(url);\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data) || (typeof Buffer !== \"undefined\" && data instanceof Buffer)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, binaryData.slice(0, responseLength));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        responseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer | Buffer} input A string, ArrayBuffer, or Buffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer | Buffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: Array<IStreamSubscriber<T>>;\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly cachedPingMessage: string | ArrayBuffer;\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private readonly reconnectPolicy?: IRetryPolicy;\r\n    private protocol: IHubProtocol;\r\n    private handshakeProtocol: HandshakeProtocol;\r\n    private callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private methods: { [name: string]: Array<(...args: any[]) => void> };\r\n    private invocationId: number;\r\n\r\n    private closedCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectingCallbacks: Array<(error?: Error) => void>;\r\n    private reconnectedCallbacks: Array<(connectionId?: string) => void>;\r\n\r\n    private receivedHandshakeResponse: boolean;\r\n    private handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private handshakeRejecter!: (reason?: any) => void;\r\n    private stopDuringStartError?: Error;\r\n\r\n    private connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private startPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private reconnectDelayHandle?: any;\r\n    private timeoutHandle?: any;\r\n    private pingServerHandle?: any;\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this.logger = logger;\r\n        this.protocol = protocol;\r\n        this.connection = connection;\r\n        this.reconnectPolicy = reconnectPolicy;\r\n        this.handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = {};\r\n        this.methods = {};\r\n        this.closedCallbacks = [];\r\n        this.reconnectingCallbacks = [];\r\n        this.reconnectedCallbacks = [];\r\n        this.invocationId = 0;\r\n        this.receivedHandshakeResponse = false;\r\n        this.connectionState = HubConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n\r\n        this.cachedPingMessage = this.protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this.connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this.connectionState !== HubConnectionState.Disconnected && this.connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this.startPromise = this.startWithStateTransitions();\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startWithStateTransitions(): Promise<void> {\r\n        if (this.connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Connecting;\r\n        this.logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this.startInternal();\r\n\r\n            this.connectionState = HubConnectionState.Connected;\r\n            this.connectionStarted = true;\r\n            this.logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async startInternal() {\r\n        this.stopDuringStartError = undefined;\r\n        this.receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this.handshakeResolver = resolve;\r\n            this.handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this.protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this.protocol.name,\r\n                version: this.protocol.version,\r\n            };\r\n\r\n            this.logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this.sendMessage(this.handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this.cleanupTimeout();\r\n            this.resetTimeoutPeriod();\r\n            this.resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this.stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                throw this.stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this.cleanupTimeout();\r\n            this.cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this.startPromise;\r\n\r\n        this.stopPromise = this.stopInternal();\r\n        await this.stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private stopInternal(error?: Error): Promise<void> {\r\n        if (this.connectionState === HubConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise!;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this.logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this.reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this.logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this.reconnectDelayHandle);\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            this.completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n        this.stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args, streamIds);\r\n\r\n        let promiseQueue: Promise<void>;\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this.callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this.sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this.callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this.callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this.launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private sendMessage(message: any) {\r\n        this.resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private sendWithProtocol(message: any) {\r\n        return this.sendMessage(this.protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const sendPromise = this.sendWithProtocol(this.createInvocation(methodName, args, true, streamIds));\r\n\r\n        this.launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this.replaceStreamingParams(args);\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this.callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this.sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this.callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this.launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods[methodName]) {\r\n            this.methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this.methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this.methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this.methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void) {\r\n        if (callback) {\r\n            this.reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void) {\r\n        if (callback) {\r\n            this.reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        this.cleanupTimeout();\r\n\r\n        if (!this.receivedHandshakeResponse) {\r\n            data = this.processHandshakeResponse(data);\r\n            this.receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this.protocol.parseMessages(data, this.logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this.invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion:\r\n                        const callback = this.callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this.callbacks[message.invocationId];\r\n                            }\r\n                            callback(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close:\r\n                        this.logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // tslint:disable-next-line:no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this.stopPromise = this.stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    default:\r\n                        this.logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.resetTimeoutPeriod();\r\n    }\r\n\r\n    private processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this.handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this.handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this.handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this.nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this.cleanupPingTimer();\r\n    }\r\n\r\n    private resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this.pingServerHandle === undefined) {\r\n                let nextPing = this.nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this.pingServerHandle = setTimeout(async () => {\r\n                    if (this.connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this.sendMessage(this.cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this.cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // tslint:disable-next-line:no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this.stopPromise = this.stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this.stopDuringStartError = this.stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this.handshakeResolver) {\r\n            this.handshakeResolver();\r\n        }\r\n\r\n        this.cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this.cleanupTimeout();\r\n        this.cleanupPingTimer();\r\n\r\n        if (this.connectionState === HubConnectionState.Disconnecting) {\r\n            this.completeClose(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected && this.reconnectPolicy) {\r\n            // tslint:disable-next-line:no-floating-promises\r\n            this.reconnect(error);\r\n        } else if (this.connectionState === HubConnectionState.Connected) {\r\n            this.completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private completeClose(error?: Error) {\r\n        if (this.connectionStarted) {\r\n            this.connectionState = HubConnectionState.Disconnected;\r\n            this.connectionStarted = false;\r\n\r\n            try {\r\n                this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this.logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this.completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this.connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this.onreconnecting) {\r\n            try {\r\n                this.reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this.logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this.reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this.reconnectDelayHandle = undefined;\r\n\r\n            if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                this.logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.startInternal();\r\n\r\n                this.connectionState = HubConnectionState.Connected;\r\n                this.logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this.onreconnected) {\r\n                    try {\r\n                        this.reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this.logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this.connectionState !== HubConnectionState.Reconnecting) {\r\n                    this.logger.log(LogLevel.Debug, `Connection moved to the '${this.connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this.connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this.completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this.getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this.logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this.completeClose();\r\n    }\r\n\r\n    private getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this.reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this.callbacks;\r\n        this.callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                callback(null, error);\r\n            });\r\n    }\r\n\r\n    private cleanupPingTimer(): void {\r\n        if (this.pingServerHandle) {\r\n            clearTimeout(this.pingServerHandle);\r\n            this.pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this.invocationId;\r\n            this.invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private launchStreams(streams: Array<IStreamResult<any>>, promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // tslint:disable-next-line:forin\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this.sendWithProtocol(this.createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private replaceStreamingParams(args: any[]): [Array<IStreamResult<any>>, string[]] {\r\n        const streams: Array<IStreamResult<any>> = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this.isObservable(argument)) {\r\n                const streamId = this.invocationId;\r\n                this.invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this.invocationId;\r\n        this.invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly retryDelays: Array<number | null>;\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this.retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this.retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly withCredentials: boolean;\r\n    private readonly pollAbort: AbortController;\r\n    private readonly headers: MessageHeaders;\r\n\r\n    private url?: string;\r\n    private running: boolean;\r\n    private receiving?: Promise<void>;\r\n    private closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted() {\r\n        return this.pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean, withCredentials: boolean, headers: MessageHeaders) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n        this.logMessageContent = logMessageContent;\r\n        this.withCredentials = withCredentials;\r\n        this.headers = headers;\r\n\r\n        this.running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.url = url;\r\n\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this.getAccessToken();\r\n        this.updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this.httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this.running = false;\r\n        } else {\r\n            this.running = true;\r\n        }\r\n\r\n        this.receiving = this.poll(this.url, pollOptions);\r\n    }\r\n\r\n    private async getAccessToken(): Promise<string | null> {\r\n        if (this.accessTokenFactory) {\r\n            return await this.accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            request.headers[\"Authorization\"] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        // tslint:disable-next-line:no-string-literal\r\n        if (request.headers[\"Authorization\"]) {\r\n            // tslint:disable-next-line:no-string-literal\r\n            delete request.headers[\"Authorization\"];\r\n        }\r\n    }\r\n\r\n    private async poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this.running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this.getAccessToken();\r\n                this.updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this.httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this.running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this.closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this.running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this.logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this.running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this.closeError = e;\r\n                            this.running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this.raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"LongPolling\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this.running = false;\r\n        this.pollAbort.abort();\r\n\r\n        try {\r\n            await this.receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this.logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this.url}.`);\r\n\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this.headers },\r\n                withCredentials: this.withCredentials,\r\n            };\r\n            const token = await this.getAccessToken();\r\n            this.updateHeaderToken(deleteOptions, token);\r\n            await this.httpClient.delete(this.url!, deleteOptions);\r\n\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this.logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this.raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this.closeError) {\r\n                logMessage += \" Error: \" + this.closeError;\r\n            }\r\n            this.logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this.closeError);\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { EventSourceConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logger: ILogger;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly withCredentials: boolean;\r\n    private readonly eventSourceConstructor: EventSourceConstructor;\r\n    private eventSource?: EventSource;\r\n    private url?: string;\r\n    private headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, eventSourceConstructor: EventSourceConstructor, withCredentials: boolean, headers: MessageHeaders) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logger = logger;\r\n        this.logMessageContent = logMessageContent;\r\n        this.withCredentials = withCredentials;\r\n        this.eventSourceConstructor = eventSourceConstructor;\r\n        this.headers = headers;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this.url = url;\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: this.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this.httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this.eventSourceConstructor(url, { withCredentials: this.withCredentials, headers: { ...headers, ...this.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this.close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: MessageEvent) => {\r\n                    const error = new Error(e.data || \"Error occurred\");\r\n                    if (opened) {\r\n                        this.close(error);\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this.eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this.logger, \"SSE\", this.httpClient, this.url!, this.accessTokenFactory, data, this.logMessageContent, this.withCredentials, this.headers);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(e?: Error) {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly logMessageContent: boolean;\r\n    private readonly webSocketConstructor: WebSocketConstructor;\r\n    private readonly httpClient: HttpClient;\r\n    private webSocket?: WebSocket;\r\n    private headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory;\r\n        this.logMessageContent = logMessageContent;\r\n        this.webSocketConstructor = webSocketConstructor;\r\n        this.httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this.headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this.httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[`Cookie`] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this.webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this.headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this.webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            // tslint:disable-next-line:variable-name\r\n            webSocket.onopen = (_event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this.webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = new Error(\"There was an error with the transport.\");\r\n                }\r\n\r\n                reject(error);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this.logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this.close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this.close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = new Error(\"There was an error with the transport.\");\r\n                    }\r\n\r\n                    reject(error);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === this.webSocketConstructor.OPEN) {\r\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this.close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this.webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this.webSocket.onclose = () => {};\r\n            this.webSocket.onmessage = () => {};\r\n            this.webSocket.onerror = () => {};\r\n            this.webSocket.close();\r\n            this.webSocket = undefined;\r\n        }\r\n\r\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this.isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: Array<keyof typeof TransferFormat>;\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private connectionStarted: boolean;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport?: ITransport;\r\n    private startInternalPromise?: Promise<void>;\r\n    private stopPromise?: Promise<void>;\r\n    private stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private stopError?: Error;\r\n    private accessTokenFactory?: () => string | Promise<string>;\r\n    private sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this.logger = createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient(this.logger);\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.connectionStarted = false;\r\n        this.options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this.logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startInternalPromise = this.startInternal(transferFormat);\r\n        await this.startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this.connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this.logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this.stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this.connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this.logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this.connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this.sendQueue) {\r\n            this.sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this.sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this.stopPromise;\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnecting;\r\n\r\n        this.stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this.stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this.stopInternal(error);\r\n        await this.stopPromise;\r\n    }\r\n\r\n    private async stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this.stopError = error;\r\n\r\n        try {\r\n            await this.startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this.stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this.logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this.accessTokenFactory = this.options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this.options.skipNegotiation) {\r\n                if (this.options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this.constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this.startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this.getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this.connectionState === ConnectionState.Disconnecting || this.connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this.accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this.createTransport(url, this.options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this.connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this.logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this.connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this.stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers = {};\r\n        if (this.accessTokenFactory) {\r\n            const token = await this.accessTokenFactory();\r\n            if (token) {\r\n                headers[`Authorization`] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this.resolveNegotiateUrl(url);\r\n        this.logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this.httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this.options.headers },\r\n                withCredentials: this.options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to complete negotiation with the server: \" + e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this.createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this.isITransport(requestedTransport)) {\r\n            this.logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this.startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this.resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed: ${transportOrError}`);\r\n            } else if (this.isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this.getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this.createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this.startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this.logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(`${endpoint.transport} failed: ${ex}`);\r\n\r\n                    if (this.connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this.logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new Error(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this.options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.WebSocket, this.options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this.options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.EventSource, this.options.withCredentials!, this.options.headers || {});\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this.httpClient, this.accessTokenFactory, this.logger, this.options.logMessageContent || false, this.options.withCredentials!, this.options.headers || {});\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this.stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this.logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this.options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this.options.EventSource)) {\r\n                        this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new Error(`'${HttpTransportType[transport]}' is not supported in your environment.`);\r\n                    } else {\r\n                        this.logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this.constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this.logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new Error(`'${HttpTransportType[transport]}' is disabled by the client.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private stopConnection(error?: Error): void {\r\n        this.logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this.connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this.stopError || error;\r\n        this.stopError = undefined;\r\n\r\n        if (this.connectionState === ConnectionState.Disconnected) {\r\n            this.logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Connecting) {\r\n            this.logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this.connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this.stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this.sendQueue) {\r\n            this.sendQueue.stop().catch((e) => {\r\n                this.logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this.sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this.connectionStarted) {\r\n            this.connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this.logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this.negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private buffer: any[] = [];\r\n    private sendBufferedData: PromiseSource;\r\n    private executing: boolean = true;\r\n    private transportResult?: PromiseSource;\r\n    private sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly transport: ITransport) {\r\n        this.sendBufferedData = new PromiseSource();\r\n        this.transportResult = new PromiseSource();\r\n\r\n        this.sendLoopPromise = this.sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this.bufferData(data);\r\n        if (!this.transportResult) {\r\n            this.transportResult = new PromiseSource();\r\n        }\r\n        return this.transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.executing = false;\r\n        this.sendBufferedData.resolve();\r\n        return this.sendLoopPromise;\r\n    }\r\n\r\n    private bufferData(data: string | ArrayBuffer): void {\r\n        if (this.buffer.length && typeof(this.buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this.buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this.buffer.push(data);\r\n        this.sendBufferedData.resolve();\r\n    }\r\n\r\n    private async sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this.sendBufferedData.promise;\r\n\r\n            if (!this.executing) {\r\n                if (this.transportResult) {\r\n                    this.transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this.sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this.transportResult!;\r\n            this.transportResult = undefined;\r\n\r\n            const data = typeof(this.buffer[0]) === \"string\" ?\r\n                this.buffer.join(\"\") :\r\n                TransportSendQueue.concatBuffers(this.buffer);\r\n\r\n            this.buffer.length = 0;\r\n\r\n            try {\r\n                await this.transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private resolver?: () => void;\r\n    private rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this.resolver, this.rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this.resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this.rejecter!(reason);\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this.isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this.isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this.isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private isInvocationMessage(message: InvocationMessage): void {\r\n        this.assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this.assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private isStreamItemMessage(message: StreamItemMessage): void {\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this.assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this.assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n", "// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\n// tslint:disable:object-literal-sort-keys\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
